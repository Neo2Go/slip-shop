import { Elysia } from 'elysia';
import mongoose from 'mongoose';
import { User ,addCredit ,deductCredit } from './models/User';
import { findSlipDB, Slip } from './models/Slip';
import { Trans ,findTransDB , updateTransDB} from './models/Transaction';
import { step_scanQRID , slip_api ,checkAccBankDigitsMatch,checkNameMatch } from './services';
import { v4 as uuidv4 } from 'uuid';
const env_AccuntName = process.env.ACCOUNT_Name;
const env_AccuntValue=process.env.ACCOUNT_Value
const env_Mae_Manee = process.env.Mae_Manee;
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
export const connectDB = async (): Promise<void> => {
  try {
    const uri = process.env.MONGO_URL;
    await mongoose.connect(uri);
    const timenow = new Date().toLocaleString("th-TH", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      hour12: false,
      timeZone: "Asia/Bangkok",
    });
    console.log(timenow);
    console.log("ü¶ä Database connected successfully");
  } catch (error) {
    console.error("Database connection error:", error);
    process.exit(1); // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
  }
};

const startApp = async () => {
  await connectDB(); // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  app.listen(7000, () => {
    console.log(
      `ü¶ä Elysia is running easySlip at ${app.server?.hostname}:${app.server?.port}`
    )}
  );
};


// ‡∏™‡∏£‡πâ‡∏≤‡∏á Elysia app
const app = new Elysia();

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á API Key
app.post('/api/register', async ({ body }) => {
  const { username } = body as { username: string };

  if (!username) {
    return { success: false, message: 'username is required' };
  }

  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    const user = new User({ username });
    await user.save();

    return { success: true, message: 'User registered successfully', apiKey: user.apiKey };
  } catch (error) {
    return { success: false, message: 'Username already exists' };
  }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô API Key
app.post('/api/change-api-key', async ({ body }) => {
  const { username, oldApiKey } = body as { username: string; oldApiKey: string };

  if (!username || !oldApiKey) {
    return { success: false, message: 'username and oldApiKey are required' };
  }

  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡πÄ‡∏î‡∏¥‡∏°
    const user = await User.findOne({ username, apiKey: oldApiKey });
    if (!user) {
      return { success: false, message: 'Invalid username or API Key' };
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà
    user.apiKey = uuidv4();
    await user.save();

    return { success: true, message: 'API Key changed successfully', newApiKey: user.apiKey };
  } catch (error) {
    return { success: false, message: 'Failed to change API Key' };
  }
});

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key
app.on('beforeHandle', async ({ request, set }) => {
  const apiKey = request.headers.get('x-api-key');
  if (!apiKey) {
    set.status = 401;
    return { success: false, message: 'API Key is required' };
  }

  const user = await User.findOne({ apiKey });
  if (!user) {
    set.status = 401;
    return { success: false, message: 'Invalid API Key' };
  }

  request.user = user;
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
app.get('/api/credit', ({ request }) => {
  const user = request.user as typeof User;
  return { success: true, credit: user.credit };
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ (‡∏£‡∏±‡∏ö qr ‡∏ú‡πà‡∏≤‡∏ô query parameter)
app.get('/api/validate-slip', async ({ request, query }) => {
  const { qr } = query as { qr: string };
  const user = request.user as typeof User;
  if (!qr) return { success: false, message: 'qr is required' };
  const scanQRID = await step_scanQRID(qr)
  if (scanQRID.success === false) return { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô QR Code ‡∏ô‡∏µ‡πâ' };
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const existingSlip = await findSlipDB(user._id, qr);
  if (existingSlip) {
    //‚úÖ‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    console.log("‚úÖ‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
    const responseData = await findTransDB(qr);
    if (responseData) return { ...responseData ,success: true, message: '‡∏™‡∏•‡∏¥‡∏õ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', credit: user.credit };



    //‚ùå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    if (!responseData) {
      console.log("‚ùå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
      const findSlipBank = await slip_api("slipok",qr);
      console.log("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
      if (findSlipBank) {
        await updateTransDB(qr, findSlipBank);
        return {data:findSlipBank, success: true, message: '‡∏™‡∏•‡∏¥‡∏õ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', credit: user.credit };
      }else{
        return { success: false, message: '‡∏™‡∏•‡∏¥‡∏õ‡∏ô‡∏µ‡πâ ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ' };
      }
    }
  }
  // //‚ùå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö 
  // console.log("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (user.credit < 0.1) {
    return { success: false, message: 'Insufficient credit' };
  }
  const findSlipBank = await slip_api("slipok",qr);
  if (findSlipBank.success === false) {
    return { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô QR Code ‡∏ô‡∏µ‡πâ' };
  }
  if (findSlipBank.success === true) {
    await updateTransDB(qr, findSlipBank);
  }
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const slip = new Slip({ userId: user._id, qrcodeData: qr});
  await slip.save();
  // ‡∏´‡∏±‡∏Å‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï 0.1
  user.credit = Math.round((user.credit - 0.1) * 100) / 100;
  await user.save();
  return {data:findSlipBank, success: true, message: 'Slip validated and credit deducted', credit: user.credit };
});

app.post('/api/topup', async ({ request, body }) => {
  const user = request.user as typeof User;
  const { qr } = body;
  if (!qr) return { success: false, message: 'qr is required' };
  const scanQRID = await step_scanQRID(qr)
  // console.log("step_scanQRID",scanQRID);
  if (scanQRID.success === false) return { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô QR Code ‡∏ô‡∏µ‡πâ' };
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const responseData = await findTransDB(qr);
  if (responseData) {
    //‚úÖ‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    console.log("‚úÖ‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",qr)
    const existingSlip = await findSlipDB(user._id, qr);
    if (!existingSlip) {
      const slip = new Slip({ userId: user._id, qrcodeData: qr});
      await slip.save();
    }
    return {success: false, message: '‡∏™‡∏•‡∏¥‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', credit: user.credit };
  }
  console.log("‚ùå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
  if (!responseData) {
    //‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°
    const transaction_data = await slip_api("slipok",qr);
    if (transaction_data.success === false) {
      return { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô QR Code ‡∏ô‡∏µ‡πâ' 
    };
  }
  //‚úÖ‡∏™‡∏•‡∏¥‡∏õ‡∏™‡πÅ‡∏Å‡∏ô‡∏ú‡πà‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°
  const receiver_info = transaction_data.receiver || {};
  const account_name  = receiver_info.displayName
  const account_value = receiver_info.account?.value || transaction_data.ref1 || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  const amount = transaction_data.amount || 0
    if (transaction_data.success === true) await updateTransDB(qr, transaction_data);
    if (receiver_info.account.type == "BANKAC" && checkNameMatch(account_name,env_AccuntName) && checkAccBankDigitsMatch(account_value,env_AccuntValue)){
      //‡πÄ‡∏ï‡∏¥‡∏°‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
      await addCredit(user,amount)
      return {success:true,message:`‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ${user.credit}`}
    }
    if (!(receiver_info.account.type == "BANKAC") && checkAccBankDigitsMatch(account_value,env_Mae_Manee)){
      //‡πÄ‡∏ï‡∏¥‡∏°‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏°‡πà‡∏°‡∏ì‡∏µ ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
      await addCredit(user,amount)
      return {success:true,message:`‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ${user.credit}`}
    }
  }
  return { success: false, message: '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' };
});
// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
startApp().catch(console.error);